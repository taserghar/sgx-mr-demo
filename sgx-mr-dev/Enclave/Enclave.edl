/*
 * Copyright (C) 2011-2019 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {

    include "user_types.h" /* buffer_t */

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file.
     *  [import]: specifies the functions to import,
     *  [*]: implies to import all functions.
     */

    from "Edger8rSyntax/Types.edl" import *;
    from "Edger8rSyntax/Pointers.edl" import *;
    from "Edger8rSyntax/Arrays.edl" import *;
    from "Edger8rSyntax/Functions.edl" import *;

    from "TrustedLibrary/Libc.edl" import *;
    from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    from "TrustedLibrary/Thread.edl" import *;



  trusted {
    /* define ECALLs here. */
    public void ecall_test();
    public void ecall_prepare_test();
    public void testEncryption();

    public void ecall_encoder_join(int blockCnt);

    public void ecall_encoder(int blockCnt, int blockSize, [in, string] const char *inputFile, [in, string] const char *outputFile);
    public void ecall_wordcount(int blockSize, int p_enablePadding, int p_sort_type, [in, string] const char *inputFile,  [in, string] const char *outPath);

    public void ecall_kmeans(int blockSize, int p_enablePadding, int p_sort_type, [in, string] const char *centroidInputFile, [in, string] const char *coordinateInputFile, [in, string] const char *outputPath );
    public void ecall_kmeans_encoder(int p_totalBlock, int p_BlockSize,  [in, string] const char *centroidFile, [in, string] const char* coordniteFile);

    public void ecall_merge_join(int p_enablePadding, int p_sort_type);
    public void ecall_prepareMemtest(int n);
    public void ecall_memtest(int n, int isSeq);


    public void gen_data(int p_nob, int p_blockSize, int p_recordSize, int p_recordLimit);
    public void prepareSort(int p_nob, int p_blockSize, int p_recordSize, int p_recordLimit, int p_isEnclaveMemory);
    public void runSort(int p_isEnclaveMemory);
    public void postSort(int p_isEnclaveMemory);
   };


    /*
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
        /* Writing to file*/
        void ocall_write_file([in, string] const char *buf,  int size, [in, string] const char* file_name, [in, string] const char* type );
        void ocall_write_file_2([user_check] const char *buf,  int size, [in, string] const char* file_name, [in, string] const char* type );

        void ocall_OpenFile([in, string] const char *pFileName, int fileId, int pIOMode);
        void ocall_CloseFile(int fileId);
        void ocall_ReadFile(int fileId, int pos, [out,size=pSize] char* pBuf, int pSize, [out] int* byteReads);
        void ocall_WriteFile(int fileId, int pos, [in,out,size=pSize] char* pBuf, int pSize, [user_check] int* ret_status);

        void ocall_takeTimestamp();
	
	void ocall_update_client([in, string] const char * str);
    };

};
